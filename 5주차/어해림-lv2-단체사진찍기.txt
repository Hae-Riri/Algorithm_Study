#include <string>
#include <vector>
#include <algorithm>

using namespace std;
// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
bool isRight(vector<char>temp, string str) {
    char f1[] = { str[0] }; char f2[] = { str[2] };
    int idx1,idx2;
    idx1= find(temp.begin(),temp.end(),str[0])- temp.begin();
    idx2=find(temp.begin(),temp.end(),str[2])- temp.begin();
    char opr[] = { str[4] };
    if (str[3] == '=') {
        if (abs(idx1 - idx2) == atoi(opr)+1)return true;
        else return false;
    }
    else if (str[3] == '<') {
        if (abs(idx1 - idx2) < atoi(opr)+1)return true;
        else return false;
    }
    else if (str[3] == '>') {
        if (abs(idx1 - idx2) > atoi(opr)+1)return true;
        else return false;
    }
}
int solution(int n, vector<string> data) {
    int answer = 0;
    vector<char>friends;
    friends.push_back('A');
    friends.push_back('C');
    friends.push_back('F');
    friends.push_back('J');
    friends.push_back('M');
    friends.push_back('N');
    friends.push_back('R');
    friends.push_back('T');
    sort(friends.begin(), friends.end());
    vector<char>temp;
    do{
        for(int i=0; i<friends.size();i++){
            temp.push_back(friends[i]);
        }
        bool right = true;
        for(int i=0; i<data.size();i++){
            if(!isRight(temp, data[i]))
                right = false;//조건 하나라도 안맞으면 false
        }
        if(right) answer++;
        temp.clear();temp.resize(0);
    }while(next_permutation(friends.begin(),friends.end()));
    
    return answer;
}