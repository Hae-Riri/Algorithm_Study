#include <vector>
#include <queue>

using namespace std;

bool visit[100][100];
int dx[4] = { -1,+1,0,0 };//행
int dy[4] = { 0,0,-1,+1 };//열

int bfs(int a, int b, int m, int n, vector<vector<int>>picture) {
    int size = 1;
    queue<pair<int, int>>q;
    q.push(make_pair(a, b));
    visit[a][b] = true;
    while (!q.empty()) {
        int x = q.front().first;
        int y = q.front().second;
        q.pop();
        for (int i = 0; i < 4; i++) {
            int nx = x + dx[i];
            int ny = y + dy[i];
            if (0 <= nx && 0 <= ny && nx < m && ny < n) {
                if (picture[nx][ny] == picture[a][b] && !visit[nx][ny]) {
                    visit[nx][ny] = true;
                    q.push(make_pair(nx, ny));
                    size++;
                }
            }
        }
    }
    return size;
}

// 전역 변수를 정의할 경우 함수 내에 초기화 코드를 꼭 작성해주세요.
vector<int> solution(int m, int n, vector<vector<int>> picture) {
    int number_of_area = 0;
    int max_size_of_one_area = 0;

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            visit[i][j] = false;
        }
    }

    for (int i = 0; i < m; i++) {
        for (int j = 0; j < n; j++) {
            if (picture[i][j] != 0 && !visit[i][j]) {
                int size = bfs(i, j, m, n, picture);
                if (size > max_size_of_one_area)
                    max_size_of_one_area = size;
                number_of_area++;
            }
        }
    }

    vector<int> answer(2);
    answer[0] = number_of_area;
    answer[1] = max_size_of_one_area;
    return answer;
}